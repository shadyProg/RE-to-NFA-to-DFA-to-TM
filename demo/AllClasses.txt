All Java Classes (as of May 24, 2025)
========================================

 

// Main.java

package com.example;

public class Main {
    public static void main(String[] args) {
       try {
        String input = "a.b|c*"; 
        Token token = new Token(input);
        char[] postfix = InfixToPostfix.convert(token.getTokens());
        NFA nfa = NFAConstructor.buildFromPostfix(postfix);
        System.out.println("NFA constructed successfully from the input: " + input);
        System.out.println("Start State: " + nfa.start);
        System.out.println("Accept State: " + nfa.accept);
        DFAConstructor dfaConstructor = new DFAConstructor(nfa);
        dfaConstructor.print();
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
}
 

 

// DFAConstructor.java
 
package com.example;
import java.util.*;

public class DFAConstructor {
    private Map<Set<State>, String> stateNames = new HashMap<>();
    private Queue<Set<State>> queue = new LinkedList<>();
    private Map<String, Map<Character, String>> dfaTransitions = new HashMap<>();
    private Set<String> finalStates = new HashSet<>();
    private int nameCounter = 0;
    NFA nfa;
    public DFAConstructor(NFA nfa) {
        if (nfa == null || nfa.start == null || nfa.accept == null) {
            throw new IllegalArgumentException("NFA must have a valid start and accept state.");
        }
        this.nfa = nfa;
        buildDFA();
    }
    private static Set<State> epsilonClosure(Set<State> states) {
        Stack<State> stack = new Stack<>();
        Set<State> result = new HashSet<>(states);
        stack.addAll(states);
        while (!stack.isEmpty()) {
            State current = stack.pop();
            for (State next : current.epsilonTransitions) {
                if (result.add(next)) {
                    stack.push(next);
                }
            }
        }
        return result;
    }
    public void buildDFA() {
        Set<State> startClosure = epsilonClosure(Set.of(nfa.start));
        queue.add(startClosure);
        stateNames.put(startClosure, "S" + nameCounter++);
        while (!queue.isEmpty()) {
            Set<State> current = queue.poll();
            String currentstate = stateNames.get(current);
            dfaTransitions.putIfAbsent(currentstate, new HashMap<>());
            Map<Character, Set<State>> transitions = new HashMap<>();
            for (State state : current) {
                for (Map.Entry<Character, List<State>> entry : state.transitions.entrySet()) {
                    transitions.putIfAbsent(entry.getKey(), new HashSet<>());
                    transitions.get(entry.getKey()).addAll(entry.getValue());
                }
            }
            for (Map.Entry<Character, Set<State>> entry : transitions.entrySet()) {
                Set<State> closure = epsilonClosure(entry.getValue());
                stateNames.putIfAbsent(closure, "S" + nameCounter);
                if (!dfaTransitions.containsKey(stateNames.get(closure))) {
                    queue.add(closure);
                    nameCounter++;
                }
                dfaTransitions.get(currentstate).put(entry.getKey(), stateNames.get(closure));
            }
            if (current.contains(nfa.accept)) {
                finalStates.add(currentstate);
            }
        }
    }
    public void print() {
        System.out.println("\n  DFA Transitions  ");
        for (var entry : dfaTransitions.entrySet()) {
            for (var trans : entry.getValue().entrySet()) {
                System.out.println(entry.getKey() + " --" + trans.getKey() + "--> " + trans.getValue());
            }
        }
        System.out.println("Final States: " + finalStates);
    }
}
 

 

// InfixToPostfix.java
 
package com.example;
import java.util.*;

public class InfixToPostfix {
    private static int precedence(char c) {
        return switch (c) {
            case '*' -> 3;
            case '.' -> 2;
            case '|' -> 1;
            default -> 0;
        };
    }
    public static char[] convert(char[] infix) {
        StringBuilder output = new StringBuilder();
        Stack<Character> stack = new Stack<>();
        for (char c : infix) {
            if (Character.isLetter(c)) {
                output.append(c);
            } else if (c == '(') {
                stack.push(c);
            } else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    output.append(stack.pop());
                }
                stack.pop();
            } else {
                while (!stack.isEmpty() && precedence(c) <= precedence(stack.peek())) {
                    output.append(stack.pop());
                }
                stack.push(c);
            }
        }
        while (!stack.isEmpty()) {
            output.append(stack.pop());
        }
        return output.toString().toCharArray();
    }
}
 

 

// NFA.java
 
package com.example;

public class NFA {
    public State start;
    public State accept;
    public NFA(State start, State accept) {
        this.start = start;
        this.accept = accept;
    }
}
 

 

// NFAConstructor.java
 
package com.example;
import java.util.*;

public class NFAConstructor {
    public static NFA buildFromPostfix(char[] postfix) {
        Stack<NFA> stack = new Stack<>();
        for (char c : postfix) {
            if (Character.isLetter(c)) {
                State start = new State();
                State accept = new State();
                start.transitions.putIfAbsent(c, new ArrayList<>());
                start.transitions.get(c).add(accept);
                stack.push(new NFA(start, accept));
            } else if (c == '*') {
                NFA nfa = stack.pop();
                State start = new State();
                State accept = new State();
                start.epsilonTransitions.add(nfa.start);
                start.epsilonTransitions.add(accept);
                nfa.accept.epsilonTransitions.add(nfa.start);
                nfa.accept.epsilonTransitions.add(accept);
                stack.push(new NFA(start, accept));
            } else if (c == '.') {
                NFA b = stack.pop();
                NFA a = stack.pop();
                a.accept.epsilonTransitions.add(b.start);
                stack.push(new NFA(a.start, b.accept));
            } else if (c == '|') {
                NFA b = stack.pop();
                NFA a = stack.pop();
                State start = new State();
                State accept = new State();
                start.epsilonTransitions.add(a.start);
                start.epsilonTransitions.add(b.start);
                a.accept.epsilonTransitions.add(accept);
                b.accept.epsilonTransitions.add(accept);
                stack.push(new NFA(start, accept));
            }
        }
        return stack.pop();
    }
}
 

 

// State.java
 
package com.example;
import java.util.*;

public class State {
    public Map<Character, List<State>> transitions = new HashMap<>();
    public List<State> epsilonTransitions = new ArrayList<>();
}
 

 

// Token.java
 
package com.example;

public class Token {
    private char[] tokens;
    public Token(String input) {
        if (!input.matches("[a-z|()* .]+")) {
            throw new IllegalArgumentException("Invalid characters in input. Only a-z, |, *, (, ), . and space  allowed");
        }
        this.tokens = input.toCharArray();
    }
    public char[] getTokens() {
        return tokens;
    }
}
 

 

*Generated on May 24, 2025*
